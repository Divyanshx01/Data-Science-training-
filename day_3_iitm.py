# -*- coding: utf-8 -*-
"""Day 3 IITM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UV8ZUt9mjWLi1Atb44j27w4RhgrG8pUL
"""

import qrcode
img = qrcode.make('https://colab.research.google.com/drive/1UV8ZUt9mjWLi1Atb44j27w4RhgrG8pUL?usp=sharing')
img.save('myqr.png')

# pip install qrcode

# Last Func
# Exception handling
# Modules
# User defined Module
# File Handling and it's uses
# Practical Examples

# Exception handling
# try
# except

# Exception handling


age = '23'

try:
  # print(1/0)
  print(vari)
  if age >= 18:
    print('can vote')
  else:
    print('can\'t vote')
except TypeError:
  print('Something went wrong!!')
  print('Invalid datatype comparison!!')

except:
  print('Invalid Code!!')

def student_records(**kwargs):
  import pandas as pd
  try:
    data = pd.DataFrame(kwargs)
    return data
  except:
    data = pd.DataFrame(kwargs,index = [1])
    return data

student_records(Name = 'Ajay',Age = 12,Address = 'Noida')

student_records(Name = ['Aman','Karan','Mohan'],
                Age = [23,34,45],
                Address = ['Noida','Delhi','Noida'],
                Sec = list('ABC'))

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear = True)
  except:
    print('Timer has been Stopped!!')

show_time()

def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'

def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo

def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'

def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')

def sum_of_n_natural_numbers(n):
    result = 0
    for i in range(1,n+1):
        result += i
    return result

def factorial(n):
    result = 1
    for i in range(1,n+1):
        result *= i
    return result

def total_sales(*args):
  #unpacking
  result = 0
  for i in args:
    result += i
  return result

def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

def sound_box(paisa,platform = 'Paytm'):
    from gtts import gTTS
    text  = f'''{platform} par {paisa} rs Prapt hue.'''
    audio = gTTS(text)
    audio.save('paytm.mp3')

    import pygame as p
    p.init()

    music = p.mixer.Sound('paytm.mp3')
    music.play()

print('''This is Ankit Module in Python
Info: https://www.google.com/''')



def check_palindrome(word:str):
  if type(word) == str:
    word = word.upper()
    if word == word[::-1]:
      return 'Palindrome'
    else:
      return 'Not a Plaindrome'
  else:
    return 'Invalid Data Type'



def give_fibo(n):
  fibo = [0,1]
  for i in range(n-2):
     last_num = fibo[-1]
     second_last_num = fibo[-2]
     next_num = last_num + second_last_num
     fibo.append(next_num)
  return fibo


def check_prime(number):
    for i in range(2,number):
        if number % i == 0:
            return 'Not a Prime Number'
            break
            print('Happy Holi')
    else:
        return 'Prime Number'


def print_star(n = 5, typ = 'left',shape = '*'):
  if typ  == 'left':
    space  = ''

  elif typ == 'right':
    space = '  '

  elif typ == 'mid':
    space = ' '

  for i in range(1,n+1):
    print(space*(n-i) + i*f'{shape} ')



def sum_of_n_natural_numbers(n):
    result = 0
    for i in range(1,n+1):
        result += i
    return result

def factorial(n):
    result = 1
    for i in range(1,n+1):
        result *= i
    return result


def total_sales(*args):
  #unpacking
  result = 0
  for i in args:
    result += i
  return result

def minn(*data):
  min_ele = data[0]
  for i in data[1:]:
    if i< min_ele:
      min_ele = i
  return min_ele

def student_records(**kwargs):
  import pandas as pd
  try:
    data = pd.DataFrame(kwargs)
    return data
  except:
    data = pd.DataFrame(kwargs,index = [1])
    return data

def show_time():
  try:
    while True:
      import time
      print(time.asctime())
      time.sleep(1)
      display(clear = True)
  except:
    print('Timer has been Stopped!!')

def sound_box(paisa,platform = 'Paytm'):
    from gtts import gTTS
    text  = f'''{platform} par {paisa} rs Prapt hue.'''
    audio = gTTS(text)
    audio.save('paytm.mp3')

    import pygame as p
    p.init()

    music = p.mixer.Sound('paytm.mp3')
    music.play()

















import ankit as a
a.give_fibo(12)

from ankit import minn
print('Done')

from ankit import *
print('Done')

import turtle
print('done')

import turtle
for i in range(120):
    turtle.speed(0)
    turtle.bgcolor('black')
    col = ['red','yellow','green','blue','orange']
    import random
    picked_color = random.choice(col)
    turtle.color(picked_color)
    turtle.circle(100)
    turtle.left(3)

import turtle
for i in range(4):
    turtle.circle(100)
    turtle.left(90)

import turtle
for i in range(6):
    turtle.bgcolor('black')
    turtle.color('cyan')
    turtle.forward(150)
    turtle.left(60)

# 1:- Text File
#
# .py,.html, .csv, .tsv, .css, .java, .c, c++,. json, .js,
# 2: Binary File
# Software
# .pdf, .mp3, mp4, .png, .jpeg, .exe, .zip, .dat, .tar .xlsx, .ppt, .doc, .ipynb

# handling:- read, write, copy, append, delete, open, new

file = open('ankit.py',mode = 'r')

file = open('ankit.py',mode = 'r')
print(file.read(100))
file.close()

f = open('ankit.py',mode = 'r')

print(f.readline())

f = open('ankit.py',mode = 'r')
for i in range(10):
    print(f.readline())

f = open('ankit.py',mode = 'r')
for i in range(10):
    print(f.readline())

f = open('ankit.py',mode = 'r')
for i in range(10):
    if i == 7: #line no 8
        print(f.readline())
    else:
        f.readline()

f = open('ankit.py',mode = 'r')

data = f.readlines()

f.close()
print('done')

